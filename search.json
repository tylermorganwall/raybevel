[{"path":"http://www.raybevel.com/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Tyler Morgan-Wall. Author, copyright holder, maintainer.","code":""},{"path":"http://www.raybevel.com/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Morgan-Wall T (2024). raybevel: Generates Polygon Straight Skeletons 3D Bevels. R package version 0.2.1, https://github.com/tylermorganwall/raybevel/, http://www.raybevel.com/, https://www.raybevel.com.","code":"@Manual{,   title = {raybevel: Generates Polygon Straight Skeletons and 3D Bevels},   author = {Tyler Morgan-Wall},   year = {2024},   note = {R package version 0.2.1, https://github.com/tylermorganwall/raybevel/, http://www.raybevel.com/},   url = {https://www.raybevel.com}, }"},{"path":"http://www.raybevel.com/index.html","id":"raybevel-3d-bevels-and-straight-skeletons-in-r","dir":"","previous_headings":"","what":"Generates Polygon Straight Skeletons and 3D Bevels","title":"Generates Polygon Straight Skeletons and 3D Bevels","text":"raybevel R package can create visualize straight skeletons, generate offset polygons, generate 3D roof models 3D beveled polygons. 3D beveled polygons can given arbitrary 1D bevel profile controlled user.","code":""},{"path":"http://www.raybevel.com/index.html","id":"background","dir":"","previous_headings":"","what":"Background","title":"Generates Polygon Straight Skeletons and 3D Bevels","text":"Straight skeletons geometric objects obtained shrinking polygon boundaries uniform speed. skeletons variety applications, : Offsetting polygons: Creating inner margins given polygon. Roof designs: Generating planar straight-line drawings represent roof structure. Beveling: Designing roof structures sloping sides. raybevel generates straight skeletons polygons uses structures generate 3D meshes offset polygons.","code":""},{"path":"http://www.raybevel.com/index.html","id":"features","dir":"","previous_headings":"","what":"Features","title":"Generates Polygon Straight Skeletons and 3D Bevels","text":"Skeleton Generation: Create straight skeletons polygons, without holes. Supports raw polygons {sf} objects. Polygon Offsetting: Generate inset polygons. 3D Roof Generation 3D Beveling: Create visualize simple complex beveled roofs based straight skeletons. Visualization: Plot straight skeletons offset polygons.","code":""},{"path":"http://www.raybevel.com/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Generates Polygon Straight Skeletons and 3D Bevels","text":"raybevel can installed Github:","code":"install.packages(\"remotes\") remotes::install_github(\"tylermorganwall/raybevel\") library(spData)"},{"path":"http://www.raybevel.com/index.html","id":"examples","dir":"","previous_headings":"","what":"Examples","title":"Generates Polygon Straight Skeletons and 3D Bevels","text":"First, let’s load library generate polygon holes.  Generate straight skeleton. plots arrows indicating directionality links, either point -roof along constant distance contours.  Now, can offset polygon inwards:  can also plot multiple offsets use color palettes.  Let’s design simple roof render rayrender. base_height less vertical offset (default 0), sides polygon also extruded.  beveled roof (, setting base height level ground, generates sides polygon well):  Multiple bevels also supported (, use raw distance offsets, rather percentage):  can use generate smooth variations roof height:  can specify complex functions bevel height well:  can also plot {sf} objects. , generate roof shape California.  can also generate complex beveled polygon generate_beveled_polygon(). ’ll first generate plot complex bevel:  Now let’s create vertically-oriented (turning swap_yz = FALSE 3D polygon California render glossy, double-sided model.","code":"library(raybevel) # Define a simple polygon vertices = matrix(c(0, 0, 7, 0, 7, 7, 0, 7, 0, 0), ncol = 2, byrow = TRUE) - 3.5 # Holes inside the polygon hole_1 = matrix(c(1, 1, 2, 1, 2, 2, 1, 2, 1, 1), ncol = 2, byrow = TRUE)[5:1, ] - 3.5 hole_2 = matrix(c(5, 5, 6, 5, 6, 6, 5, 6, 5, 5), ncol = 2, byrow = TRUE)[5:1, ] - 3.5 plot.new() par(mai = c(0, 0, 0, 0)) plot(vertices, type = \"n\", xlim = c(-4, 4), ylim = c(-4, 4), xlab = \"\", ylab = \"\",      xaxt = 'n', yaxt = 'n', frame.plot = FALSE, asp = 1) polygon(vertices, col = \"lightblue\") polygon(hole_1, col = \"white\") polygon(hole_2, col = \"white\") dev.off() #> null device  #>           1 skeleton = skeletonize(vertices, holes = list(hole_1, hole_2)) plot_skeleton(skeleton) offset_polygon = generate_offset_polygon(skeleton, offset = 1.2) offset_polygon #> [[1]] #> [[1]] #> $offset_1.200000_1 #>      x    y #> 1  2.3 -2.3 #> 2  2.3  0.3 #> 3  0.3  0.3 #> 4  0.3  2.3 #> 5 -2.3  2.3 #> 6 -2.3 -0.3 #> 7 -0.3 -0.3 #> 8 -0.3 -2.3 #>  #> attr(,\"class\") #> [1] \"rayskeleton_offset_polygons\" \"list\"                        #> attr(,\"number_polygons\") #> [1] 1 #>  #> attr(,\"class\") #> [1] \"rayskeleton_offset_polygons_collection\" #> [2] \"list\"                                   #> attr(,\"skeleton\") #> $nodes #>    id    x    y time  edge #> 1   1 -3.5 -3.5  0.0  TRUE #> 2   2  3.5 -3.5  0.0  TRUE #> 3   3  3.5  3.5  0.0  TRUE #> 4   4 -3.5  3.5  0.0  TRUE #> 5   5 -2.5 -2.5  0.0  TRUE #> 6   6 -2.5 -1.5  0.0  TRUE #> 7   7 -1.5 -1.5  0.0  TRUE #> 8   8 -1.5 -2.5  0.0  TRUE #> 9   9  1.5  1.5  0.0  TRUE #> 10 10  1.5  2.5  0.0  TRUE #> 11 11  2.5  2.5  0.0  TRUE #> 12 12  2.5  1.5  0.0  TRUE #> 13 13 -3.0 -3.0  0.5 FALSE #> 14 14 -3.0 -1.0  0.5 FALSE #> 15 15  3.0  1.0  0.5 FALSE #> 16 16 -1.0 -3.0  0.5 FALSE #> 17 17  3.0  3.0  0.5 FALSE #> 18 18  1.0  3.0  0.5 FALSE #> 19 19  0.0  0.0  1.5 FALSE #> 20 20 -1.0  1.0  2.5 FALSE #> 21 21  1.0 -1.0  2.5 FALSE #>  #> $links #>    source destination  edge source_time destination_time #> 1      12          11  TRUE         0.0              0.0 #> 2      11          10  TRUE         0.0              0.0 #> 3      10           9  TRUE         0.0              0.0 #> 4       9          12  TRUE         0.0              0.0 #> 5       8           7  TRUE         0.0              0.0 #> 6       7           6  TRUE         0.0              0.0 #> 7       6           5  TRUE         0.0              0.0 #> 8       5           8  TRUE         0.0              0.0 #> 9       4           3  TRUE         0.0              0.0 #> 10      3           2  TRUE         0.0              0.0 #> 11      2           1  TRUE         0.0              0.0 #> 12      1           4  TRUE         0.0              0.0 #> 13      1          13 FALSE         0.0              0.5 #> 14      3          17 FALSE         0.0              0.5 #> 15      5          13 FALSE         0.0              0.5 #> 16      6          14 FALSE         0.0              0.5 #> 17      8          16 FALSE         0.0              0.5 #> 18     10          18 FALSE         0.0              0.5 #> 19     11          17 FALSE         0.0              0.5 #> 20     12          15 FALSE         0.0              0.5 #> 21      7          19 FALSE         0.0              1.5 #> 22      9          19 FALSE         0.0              1.5 #> 23      2          21 FALSE         0.0              2.5 #> 24      4          20 FALSE         0.0              2.5 #> 25     13          16 FALSE         0.5              0.5 #> 26     13          14 FALSE         0.5              0.5 #> 27     15          17 FALSE         0.5              0.5 #> 28     17          18 FALSE         0.5              0.5 #> 29     14          20 FALSE         0.5              2.5 #> 30     15          21 FALSE         0.5              2.5 #> 31     16          21 FALSE         0.5              2.5 #> 32     18          20 FALSE         0.5              2.5 #> 33     19          20 FALSE         1.5              2.5 #> 34     19          21 FALSE         1.5              2.5 #>  #> attr(,\"class\") #> [1] \"rayskeleton\" #> attr(,\"original_vertices\") #>         x    y #> [1,] -3.5 -3.5 #> [2,]  3.5 -3.5 #> [3,]  3.5  3.5 #> [4,] -3.5  3.5 #> attr(,\"original_holes\") #> attr(,\"original_holes\")[[1]] #>         x    y #> [1,] -2.5 -2.5 #> [2,] -2.5 -1.5 #> [3,] -1.5 -1.5 #> [4,] -1.5 -2.5 #>  #> attr(,\"original_holes\")[[2]] #>        x   y #> [1,] 1.5 1.5 #> [2,] 1.5 2.5 #> [3,] 2.5 2.5 #> [4,] 2.5 1.5 #>  #> attr(,\"number_offsets\") #> [1] 1 #> attr(,\"original_vertices\") #>         x    y #> [1,] -3.5 -3.5 #> [2,]  3.5 -3.5 #> [3,]  3.5  3.5 #> [4,] -3.5  3.5 #> attr(,\"original_holes\") #> attr(,\"original_holes\")[[1]] #>         x    y #> [1,] -2.5 -2.5 #> [2,] -2.5 -1.5 #> [3,] -1.5 -1.5 #> [4,] -1.5 -2.5 #>  #> attr(,\"original_holes\")[[2]] #>        x   y #> [1,] 1.5 1.5 #> [2,] 1.5 2.5 #> [3,] 2.5 2.5 #> [4,] 2.5 1.5 #>  #>  #> attr(,\"class\") #> [1] \"rayskeleton_polygons\" \"list\" plot_offset_polygon(offset_polygon, skeleton = skeleton) library(patchwork) offset_polygon = generate_offset_polygon(skeleton, offset = seq(0, 2.5, by = 0.1)+0.05) plot_skeleton(skeleton, arrow_color = \"black\", polygon_color = \"black\") +  plot_offset_polygon(offset_polygon, skeleton = skeleton, plot_original_polygon = TRUE) library(rayrender) library(rayvertex)  roof = generate_roof(skeleton)    generate_ground(depth = -0.5, material = diffuse(color = \"grey\", checkercolor = \"white\")) |>   add_object(raymesh_model(roof, material = diffuse(color = \"dodgerblue\"))) |>   add_object(sphere(y = 20, x = 0, z = -10, material = light(intensity = 200))) |>    render_scene(lookfrom = c(10, 20, 0), sample_method = \"sobol_blue\", fov = 25,                 min_variance = 1e-6, clamp_value = 10, samples = 256, width = 800, height = 800) roof_bevel = generate_beveled_polygon(skeleton, base = TRUE, base_height = -0.5,                                       bevel_offsets = generate_bevel(\"circular\", max_height = 0.5,                                                                       bevel_end = 0.5),)  generate_ground(depth = -0.5, material = diffuse(color = \"grey\", checkercolor = \"white\")) |>   add_object(raymesh_model(roof_bevel, material = diffuse(color = \"dodgerblue\"), override_material = TRUE)) |>   add_object(sphere(y = 15, x = 0, z = -10, material = light(intensity = 200))) |>    render_scene(lookfrom = c(10, 20, 0), sample_method = \"sobol_blue\", fov = 25,                 min_variance = 1e-6, clamp_value = 10, samples = 256, width = 800, height = 800) roof_bevel_multi = generate_beveled_polygon(skeleton,                                              bevel_offsets = c(0.25, 0.5, 1, 1.5, 2),                                             bevel_heights = c(0.25, 0.25, 0.5, 0.5, 0.75),                                             raw_offsets = TRUE, base = TRUE, base_height = -0.5)   generate_ground(depth = -0.5, material = diffuse(color = \"grey\", checkercolor = \"white\")) |>   add_object(raymesh_model(roof_bevel_multi, material = diffuse(color = \"dodgerblue\"), override_material = TRUE)) |>   add_object(sphere(y = 15, x = 0, z = -10, material = light(intensity = 200))) |>    render_scene(lookfrom = c(10, 20, 0), sample_method = \"sobol_blue\", fov = 25,                 min_variance = 1e-6, clamp_value = 10, samples = 256, width = 800, height = 800) roof_bevel_multi = generate_beveled_polygon(skeleton, base_height = -0.5,                                             bevel_offsets = seq(0, 2.5, by = 0.02),                                             bevel_heights = 1 - exp(-seq(0, 2.5, by = 0.02) * 10),                                             raw_heights = TRUE,                                             raw_offsets = TRUE)   generate_ground(depth = -0.5, material = diffuse(color = \"grey\", checkercolor = \"white\")) |>   add_object(raymesh_model(roof_bevel_multi, material = diffuse(color = \"dodgerblue\"), override_material = TRUE)) |>   add_object(sphere(y = 15, x = 0, z = -10, material = light(intensity = 200))) |>    render_scene(lookfrom = c(10, 20, 0), sample_method = \"sobol_blue\", fov = 25,                min_variance = 1e-6, clamp_value = 10, samples = 256, width = 800, height = 800) roof_bevel_multi_sin = generate_beveled_polygon(skeleton,                                                  bevel_offsets = seq(0,2.5,by=0.02),                                                 bevel_heights = abs(sinpi(exp(seq(0,2.5,by=0.02))/2))/2,                                                 base = TRUE, vertical_offset=0.5, base_height = -0.5,                                                 raw_offsets = TRUE)   generate_ground(depth = -0.5,material = diffuse(color=\"grey\", checkercolor = \"white\")) |>   add_object(raymesh_model(roof_bevel_multi_sin, material = diffuse(color=\"dodgerblue\"), override_material = TRUE)) |>   add_object(sphere(y=15,x=0,z=-10,material=light(intensity = 200))) |>    render_scene(lookfrom=c(10,20,0), sample_method = \"sobol_blue\",fov=25, ortho_dimensions = c(8,8),                min_variance = 1e-6, clamp_value = 10, samples = 256, width=800,height=800) library(rayvertex) library(sf)   # Load US states data and extract California us_states = spData::us_states california = us_states[us_states$NAME == \"California\",] cali_skeleton = skeletonize(california)  # Skeletonize the California shape  # Generate and transform the roof model roof_cali = generate_roof(cali_skeleton, base = TRUE, sides = TRUE, vertical_offset = 1, base_height = 0,                           angle = 30) |>    center_mesh() |>    translate_mesh(c(0,1,0))   # Render the scene with the California roof model generate_ground(depth = -0.1, material = diffuse(color=\"grey50\", checkercolor = \"white\", checkerperiod = 0.5)) |>   add_object(raymesh_model(roof_cali, material = diffuse(color = \"purple\"), override_material = TRUE)) |>   add_object(sphere(y=20, x=20, z=-50, radius=10, material=light(color=\"white\", intensity = 20))) |>   add_object(sphere(y=20, x=30, z=50, radius=10, material=light(color=\"orange\", intensity = 20))) |>   render_scene(lookfrom=c(0,10,-5), camera_up=c(0,0,1), lookat=c(0,0,0.25),                sample_method = \"sobol_blue\", fov=0, ortho_dimensions = c(12,12),                min_variance = 0, clamp_value = 10, samples = 256, width=800, height=800) bevel = generate_complex_bevel(c(\"bump\", \"exp\"),                                bevel_start = c(0,0.3),                                bevel_end = c(0.1,0.6),                                reverse = c(F,F),                                segment_height = c(0.05,0.2),                                plot_bevel = TRUE) ca_model = generate_beveled_polygon(cali_skeleton, vertical_offset = 0.2, sides = TRUE, double_sided = TRUE,                                     bevel_offsets = bevel, swap_yz = FALSE,                                      material = rayvertex::material_list(diffuse = \"purple\"))  # Rendering the 3D model ca_model |>   rayvertex::center_mesh() |>   raymesh_model(y = 1.5, material = glossy(color = \"purple\", gloss = 0.8)) |>   add_object(generate_studio(depth = -4, distance = -15,                              material = diffuse(color = \"grey50\", checkercolor = \"grey20\"))) |>   add_object(xy_rect(y = 15, x = 5, z = 60, xwidth = 100, ywidth = 50,                      flipped = TRUE, angle = c(0, 45, 0),                      material = light(intensity = 3))) |>   render_scene(lookfrom = c(10, 10, 50), lookat = c(0, 1.5, 1),                sample_method = \"sobol_blue\", samples = 256, clamp_value = 10,                width = 800, height = 800, fov = 15, ortho_dimensions = c(10, 10))"},{"path":"http://www.raybevel.com/index.html","id":"to-do","dir":"","previous_headings":"","what":"To-do","title":"Generates Polygon Straight Skeletons and 3D Bevels","text":"Keep CRS information add option convert back {sf} object ggplot2 geom external offsets","code":""},{"path":"http://www.raybevel.com/reference/arrange_base.html","id":null,"dir":"Reference","previous_headings":"","what":"Arrange or Reorder Rows of a Data Frame by Columns — arrange_base","title":"Arrange or Reorder Rows of a Data Frame by Columns — arrange_base","text":"function sorts data frame based provided columns.","code":""},{"path":"http://www.raybevel.com/reference/arrange_base.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Arrange or Reorder Rows of a Data Frame by Columns — arrange_base","text":"","code":"arrange_base(data, ...)"},{"path":"http://www.raybevel.com/reference/arrange_base.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Arrange or Reorder Rows of a Data Frame by Columns — arrange_base","text":"data data frame. ... Column names determine sort order.","code":""},{"path":"http://www.raybevel.com/reference/arrange_base.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Arrange or Reorder Rows of a Data Frame by Columns — arrange_base","text":"sorted data frame.","code":""},{"path":"http://www.raybevel.com/reference/change_polygon_bevel.html","id":null,"dir":"Reference","previous_headings":"","what":"Change an existing polygon bevel's bevel profile. — change_polygon_bevel","title":"Change an existing polygon bevel's bevel profile. — change_polygon_bevel","text":"function generates beveled 3D polygon model modified straight skeleton pre-existing polygons generated `generate_beveled_polygon` function `return_skeleton_polygons = TRUE`.","code":""},{"path":"http://www.raybevel.com/reference/change_polygon_bevel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change an existing polygon bevel's bevel profile. — change_polygon_bevel","text":"","code":"change_polygon_bevel(   skeleton_polygons,   bevel_offsets = NULL,   bevel_heights = NULL,   set_max_height = FALSE,   max_height = 1,   vertical_offset = 0,   base = TRUE,   base_height = NA,   raw_offsets = FALSE,   raw_heights = FALSE,   swap_yz = TRUE,   progress = TRUE,   sides = FALSE,   double_sided = FALSE,   scale_all_max = FALSE,   material = material_list(),   bevel_material = NA,   verbose = FALSE )"},{"path":"http://www.raybevel.com/reference/change_polygon_bevel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change an existing polygon bevel's bevel profile. — change_polygon_bevel","text":"skeleton_polygons Default `NULL`. straight skeleton generated `generate_beveled_polygon` function `return_skeleton_polygons = TRUE`. bevel_offsets Default `NULL`. offset(s) bevel. bevel_heights Default set `bevel_offsets`. Numeric vector specifying heights bevels. Must length `bevel_offsets`. set_max_height Default `FALSE`. logical flag controls whether set max height polygon based `max_height` argument. max_height Default `1`. maximum height polygon. vertical_offset Default `0`. vertical offset polygon. base Default `TRUE`. logical flag controls whether generate bottom polygon. base_height Default `NA`. Height base, defaulting `min(bevel_heights) + vertical_offset` . raw_offsets Default `FALSE`. logical flag indicating whether `bevel_offsets` already raw format need multiplied maximum time skeleton. raw_heights Default `FALSE`. logical flag indicating whether `bevel_heights` already raw format need multiplied maximum time skeleton. swap_yz Default `TRUE`. logical flag controls whether swap y z coordinates resulting mesh. `TRUE`, y z coordinates swapped. progress Default `TRUE`. Whether display progress bar. sides Default `FALSE`. logical flag whether draw sides. automatically set `TRUE` `base = TRUE` `base_height` less `vertical_offset`. double_sided Default `FALSE`. logical flag controls whether polygon double-sided. scale_all_max Default `FALSE`. passing list multiple skeletons polygons, whether scale polygon overall max height, whether scale max height maximum internal distance polygon. material Default `material_list()`. Interface set color/appearance/material options resulting `ray_mesh` mesh. bevel_material Default `NA`, uses material specified `material`. Interface set color/appearance/material options resulting `ray_mesh` bevel mesh. verbose Default `FALSE`. logical flag control whether additional timing information displayed.","code":""},{"path":"http://www.raybevel.com/reference/change_polygon_bevel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Change an existing polygon bevel's bevel profile. — change_polygon_bevel","text":"3D mesh beveled polygon model.","code":""},{"path":"http://www.raybevel.com/reference/change_polygon_bevel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Change an existing polygon bevel's bevel profile. — change_polygon_bevel","text":"","code":"# Skeletonize a complex {sf} object and set return_skeleton_polygons = TRUE in # generate_beveled_polygon(). This returns skeleton object with polygons included, which # allows for quickly generating 3D models with different bevels. if(run_docs_raybevel()) {   library(rayrender)   library(rayvertex)   us_states = spData::us_states   cali = us_states[us_states$NAME == \"California\",]   cali_skeleton = skeletonize(cali)   plot_skeleton(cali_skeleton)   # We add manual offsets to ensure that the polygon can be morphed all along its interior   bevel = generate_bevel(manual_offsets = seq(0,1,by=0.01), max_height=0.5)   bevel_model_cali = generate_beveled_polygon(cali_skeleton,                                               bevel_offsets = bevel,                                               return_skeleton_polygons = TRUE)    bevel_new = change_polygon_bevel(bevel_model_cali,                                    bevel_offsets = generate_bevel(max_height=0.5,                                    bevel_end=0.5)) |>     center_mesh()    scene_base = xz_rect(xwidth=100,zwidth=100,                        material=diffuse(color=\"grey20\", checkercolor=\"white\")) |>     add_object(sphere(y=8,z=10,x=-3,material=light(intensity=100))) |>     add_object(sphere(y=800,z=10,x=-3,radius=100,material=light(intensity=5)))    raymesh_model(bevel_new, y=0.5, override_material = TRUE,                 material = diffuse(color=\"purple\")) |>     add_object(scene_base) |>     render_scene(lookfrom=c(0,30,-10), sample_method = \"sobol_blue\",clamp_value = 10,                  width=800,height=800,fov=0,ortho_dimensions=c(12,12)) } #>  #> Attaching package: ‘rayvertex’ #> The following objects are masked from ‘package:rayrender’: #>  #>     r_obj, run_documentation  # Change to a smooth bevel if(run_docs_raybevel()) {   new_bevel = generate_bevel(\"circular\", bevel_start = 0, bevel_end=1)   bevel_new = change_polygon_bevel(bevel_model_cali,                                    bevel_offsets = new_bevel, solid ) |>     center_mesh()   raymesh_model(bevel_new, override_material = TRUE, y=1,material = diffuse(color=\"purple\")) |>     add_object(scene_base) |>     render_scene(lookfrom=c(0,30,-10), sample_method = \"sobol_blue\",clamp_value = 10,                  width=800,height=800,fov=0,ortho_dimensions=c(12,12)) }   # Make a complex bevel if(run_docs_raybevel()) {   complex_coords = generate_complex_bevel(     bevel_type  = c(\"angled\",\"flat\", \"angled\", \"flat\"),     bevel_start = head(seq(0,1,by=0.05),-1),     bevel_end   = tail(seq(0,1,by=0.05),-1),     overall_height = 1,     angle = c(45,45,15,15),     reverse = c(FALSE, FALSE,TRUE,TRUE),     plot_bevel = TRUE   )   bevel_new = change_polygon_bevel(bevel_model_cali,                                    bevel_offsets = complex_coords) |>     center_mesh()   raymesh_model(bevel_new, override_material = TRUE, y=1,material = diffuse(color=\"purple\")) |>     add_object(scene_base) |>     render_scene(lookfrom=c(0,30,-20), sample_method = \"sobol_blue\",clamp_value = 10,                  width=800,height=800,fov=0,ortho_dimensions=c(12,12)) }    # Quickly generate new bevels to inflate California like a balloon using the arctan function. if(run_docs_raybevel()) {   inflate_california = function(magnitudes) {   for(val in magnitudes) {     bevel_new = change_polygon_bevel(bevel_model_cali,                                      bevel_heights = 1/2*atan(seq(0,val,length.out=100)),                                      bevel_offsets = seq(0,1, length.out=100),                                      base = TRUE) |>       translate_mesh(c(-120.49,0,-38.72))     raymesh_model(bevel_new, y = 0, override_material = TRUE,                   material = glossy(color=\"darkred\")) |>       add_object(scene_base) |>       add_object(sphere(x=-30,z=30,y=18,radius=30,material=light(color=\"white\", intensity=5))) |>       render_scene(lookfrom=c(-1, 28, -20.32), lookat=c(-1, 1.46, -2),                    sample_method = \"sobol_blue\", clamp_value = 10,                    width=800,height=800,fov=20,samples=256)     }   }   inflate_california(c(1,4,16,64)) }"},{"path":"http://www.raybevel.com/reference/convert_ss_to_polygons.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Face IDs — convert_ss_to_polygons","title":"Get Face IDs — convert_ss_to_polygons","text":"Get Face IDs","code":""},{"path":"http://www.raybevel.com/reference/convert_ss_to_polygons.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Face IDs — convert_ss_to_polygons","text":"","code":"convert_ss_to_polygons(ss, progress = FALSE)"},{"path":"http://www.raybevel.com/reference/convert_ss_to_polygons.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Face IDs — convert_ss_to_polygons","text":"ss","code":""},{"path":"http://www.raybevel.com/reference/determinant2x2.html","id":null,"dir":"Reference","previous_headings":"","what":"Title — determinant2x2","title":"Title — determinant2x2","text":"Title","code":""},{"path":"http://www.raybevel.com/reference/determinant2x2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title — determinant2x2","text":"","code":"determinant2x2(v1, v2)"},{"path":"http://www.raybevel.com/reference/determinant2x2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Title — determinant2x2","text":"v1 Vector 1 v2 Vector 2","code":""},{"path":"http://www.raybevel.com/reference/determinant2x2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Title — determinant2x2","text":"Value","code":""},{"path":"http://www.raybevel.com/reference/determinant2x2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Title — determinant2x2","text":"","code":"#None"},{"path":"http://www.raybevel.com/reference/discretize_and_merge_nodes.html","id":null,"dir":"Reference","previous_headings":"","what":"Discretize and Merge Nodes — discretize_and_merge_nodes","title":"Discretize and Merge Nodes — discretize_and_merge_nodes","text":"Discretize Merge Nodes","code":""},{"path":"http://www.raybevel.com/reference/discretize_and_merge_nodes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Discretize and Merge Nodes — discretize_and_merge_nodes","text":"","code":"discretize_and_merge_nodes(skeleton, tolerance = 1e-05)"},{"path":"http://www.raybevel.com/reference/dot.html","id":null,"dir":"Reference","previous_headings":"","what":"Dot Product — dot","title":"Dot Product — dot","text":"Dot Product","code":""},{"path":"http://www.raybevel.com/reference/dot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dot Product — dot","text":"","code":"dot(v1, v2)"},{"path":"http://www.raybevel.com/reference/dot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dot Product — dot","text":"v1 Vector 1 v2 Vector 2","code":""},{"path":"http://www.raybevel.com/reference/dot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dot Product — dot","text":"Value","code":""},{"path":"http://www.raybevel.com/reference/dot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dot Product — dot","text":"","code":"#None"},{"path":"http://www.raybevel.com/reference/extrude_sides.html","id":null,"dir":"Reference","previous_headings":"","what":"Extrude Sides of Polygon — extrude_sides","title":"Extrude Sides of Polygon — extrude_sides","text":"Extrude Sides Polygon","code":""},{"path":"http://www.raybevel.com/reference/extrude_sides.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extrude Sides of Polygon — extrude_sides","text":"","code":"extrude_sides(vertices, holes = list(), bottom = 0, top = 1)"},{"path":"http://www.raybevel.com/reference/find_dangling_nodes.html","id":null,"dir":"Reference","previous_headings":"","what":"Discretize and Merge Nodes — find_dangling_nodes","title":"Discretize and Merge Nodes — find_dangling_nodes","text":"Discretize Merge Nodes","code":""},{"path":"http://www.raybevel.com/reference/find_dangling_nodes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Discretize and Merge Nodes — find_dangling_nodes","text":"","code":"find_dangling_nodes(skeleton)"},{"path":"http://www.raybevel.com/reference/generate_bevel.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate 2D Bevel Profile for 3D Polygons — generate_bevel","title":"Generate 2D Bevel Profile for 3D Polygons — generate_bevel","text":"Generate 2D Bevel Profile 3D Polygons","code":""},{"path":"http://www.raybevel.com/reference/generate_bevel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate 2D Bevel Profile for 3D Polygons — generate_bevel","text":"","code":"generate_bevel(   bevel_type = \"angled\",   bevel_start = 0,   bevel_end = 0.2,   max_height = 1,   angle = NULL,   curve_points = 50,   reverse = FALSE,   flip = FALSE,   initial_height = 0,   add_end_points = TRUE,   manual_offsets = NULL,   step_epsilon = 1e-08,   plot_bevel = FALSE,   set_minimum_zero = TRUE,   zero_offset_epsilon = 1e-05 )"},{"path":"http://www.raybevel.com/reference/generate_bevel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate 2D Bevel Profile for 3D Polygons — generate_bevel","text":"bevel_type Character `angled`. Type bevel, one following options: - \"circular\": Creates rounded bevel resembling quarter-circle. - \"exp\": Creates exponential curve, starting slow accelerating. - \"bump\": Creates bump-like profile, rising falling within coverage. - \"step\": Generates step-like bevel flat top. - \"block\": Generates block-like bevel, jumping straight max_height back base. - \"angled\": Generates straight angled bevel. can optionally set 'angle' parameter bevel. - \"flat\": Generates flat area. bevel_start Default `0`. starting point bevel along curve, ranges 0 1. bevel_end Default `0.2`. ending point bevel along curve, ranges 0 1. max_height Default `1`. maximum height bevel, measured initial height. angle Default `NULL`. Optional angle parameter degrees angular bevels. curve_points Default `50`. Number points plot curve-based bevels. reverse Default `FALSE`. `TRUE`, curve reversed vertically. flip Default `FALSE`. `TRUE`, curve flipped horizontally. initial_height Default `0`. initial height bevel starts. bevel rescaled fit within range initial_height max_height. add_end_points Default `TRUE`. Whether ensure point zero point one. manual_offsets Default `NULL`, none. force bevel add point (interpolating two nearest points) specified offsets. useful want add points specific distances along curve. step_epsilon Default `1e-5`. size small percentage step using step bevel. plot_bevel Default `FALSE`. Whether plot bevel. set_minimum_zero Default `TRUE`. Whether offset lowest point bevel zero. zero_offset_epsilon Default `1e-5`. Amount offset bevel ensure self-intersection base.","code":""},{"path":"http://www.raybevel.com/reference/generate_bevel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate 2D Bevel Profile for 3D Polygons — generate_bevel","text":"List containing 'x' 'y', coordinates 2D bevel profile.","code":""},{"path":"http://www.raybevel.com/reference/generate_bevel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate 2D Bevel Profile for 3D Polygons — generate_bevel","text":"","code":"# Generate a single bevel profile and plot it coords = generate_bevel(\"circular\", 0.2, 0.8, 0.2, plot_bevel = TRUE)   # Plot all bevel profiles in a grid plot_all_bevels = function() {   oldpar = par(mfrow = c(4, 3), mai = c(0.2, 0.2, 0.5, 0.2))   on.exit(par(oldpar))   max_height = c(1,1,1,1)   types = rep(c(\"circular\", \"exp\", \"bump\", \"step\", \"block\", \"angled\"),2)   reverses = c(rep(FALSE,6),rep(TRUE,6))   for(i in seq_len(length(types))) {     coords = generate_bevel(types[i], 0.2, 0.8, 1, flip = TRUE,                             angle = 45, reverse = reverses[i], plot_bevel = TRUE)   } } plot_all_bevels()"},{"path":"http://www.raybevel.com/reference/generate_beveled_polygon.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a beveled 3D polygon — generate_beveled_polygon","title":"Generate a beveled 3D polygon — generate_beveled_polygon","text":"function generates beveled 3D polygon straight skeleton.","code":""},{"path":"http://www.raybevel.com/reference/generate_beveled_polygon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a beveled 3D polygon — generate_beveled_polygon","text":"","code":"generate_beveled_polygon(   skeleton,   bevel_offsets = generate_bevel(),   bevel_heights = NULL,   set_max_height = FALSE,   max_height = NA,   vertical_offset = 0,   base = TRUE,   base_height = 0,   raw_offsets = FALSE,   raw_heights = FALSE,   swap_yz = TRUE,   progress = TRUE,   double_sided = FALSE,   sides = FALSE,   return_skeleton_polygons = FALSE,   scale_all_max = FALSE,   material = material_list(),   bevel_material = NA,   verbose = FALSE )"},{"path":"http://www.raybevel.com/reference/generate_beveled_polygon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a beveled 3D polygon — generate_beveled_polygon","text":"skeleton Default `NULL`. straight skeleton generated `skeletonize` function. bevel_offsets Default `NULL`. offset(s) bevel. bevel_heights Default set `bevel_offsets`. Numeric vector specifying heights bevels. Must length `bevel_offsets`. set_max_height Default `FALSE`. logical flag controls whether set max height roof based `max_height` argument. max_height Default `1`. maximum height polygon. vertical_offset Default `0`. vertical offset polygon. base Default `TRUE`. logical flag controls whether generate bottom polygon. base_height Default `NA`. Height base, defaulting `min(bevel_heights) + vertical_offset` . raw_offsets Default `FALSE`. logical flag indicating whether `bevel_offsets` already raw format need multiplied maximum time skeleton. raw_heights Default `FALSE`. logical flag indicating whether `bevel_heights` already raw format need multiplied maximum time skeleton. swap_yz Default `TRUE`. logical flag controls whether swap y z coordinates resulting mesh. `TRUE`, y z coordinates swapped. progress Default `TRUE`. logical flag control whether progress bar displayed roof generation. double_sided Default `FALSE`. logical flag controls whether polygon double-sided. sides Default `FALSE`. logical flag whether draw sides. automatically set `TRUE` `base = TRUE` `base_height` less `vertical_offset`. return_skeleton_polygons Default `FALSE`. logical flag controls whether return skeleton polygons along 3D mesh. scale_all_max Default `FALSE`. passing list multiple skeletons polygons, whether scale polygon overall max height, whether scale max height maximum internal distance polygon. material Default `material_list()`. Interface set color/appearance/material options resulting `ray_mesh` mesh. bevel_material Default `NA`, uses material specified `material`. Interface set color/appearance/material options resulting `ray_mesh` bevel mesh. verbose Default `FALSE`. logical flag control whether additional timing information displayed.","code":""},{"path":"http://www.raybevel.com/reference/generate_beveled_polygon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a beveled 3D polygon — generate_beveled_polygon","text":"3D mesh beveled polygon model.","code":""},{"path":"http://www.raybevel.com/reference/generate_beveled_polygon.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a beveled 3D polygon — generate_beveled_polygon","text":"","code":"#Generate vertices and holes vertices = matrix(c(0,0, 7,0, 7,7, 0,7, 0,0), ncol = 2, byrow = TRUE)-3.5 hole_1 = matrix(c(1,1, 2,1, 2,2, 1,2, 1,1), ncol = 2, byrow = TRUE)[5:1,]-3.5 hole_2 = matrix(c(5,5, 6,5, 6,6, 5,6, 5,5), ncol = 2, byrow = TRUE)[5:1,]-3.5 skeleton = skeletonize(vertices, holes = list(hole_1, hole_2)) plot_skeleton(skeleton)   #Generate a roof model and specify the material if(run_docs_raybevel()) {   library(rayrender)   library(rayvertex)   scene_base = xz_rect(xwidth=100,zwidth=100,                        material=diffuse(color=\"grey20\", checkercolor=\"white\")) |>     add_object(sphere(y=8,z=10,x=-3,material=light(intensity=100))) |>     add_object(sphere(y=800,z=10,x=-3,radius=100,material=light(intensity=5))) |>     add_object(sphere(x=-10,z=-10,y=5,material=light(color=\"red\", intensity=40))) |>     add_object(sphere(x=10,z=-10,y=5,material=light(color=\"orange\", intensity=40)))    bevel = generate_bevel(\"angled\", bevel_start = 0, bevel_end = 0.2, max_height=0.25)   roof_model = generate_beveled_polygon(skeleton,                                         bevel_offsets = bevel,                                         material = material_list(diffuse=\"purple\"))    raymesh_model(roof_model, override_material = FALSE) |>     add_object(scene_base) |>     render_scene(lookfrom=c(10,30,20), sample_method = \"sobol_blue\",                  width=800,height=800,fov=0,ortho_dimensions=c(10,10)) }   # Change the bevel to be circular if(run_docs_raybevel()) {   bevel = generate_bevel(\"circular\", bevel_start = 0, bevel_end = 0.2, max_height=0.25)   roof_model = generate_beveled_polygon(skeleton,                                         bevel_offsets = bevel,                                         material = material_list(diffuse=\"purple\"))    raymesh_model(roof_model, override_material = FALSE) |>     add_object(scene_base) |>     render_scene(lookfrom=c(10,30,20), sample_method = \"sobol_blue\",                  width=800,height=800,fov=0,ortho_dimensions=c(10,10)) }   # Change the bevel to type \"bump\", change the max height, and raise it off the surface if(run_docs_raybevel()) {   bevel = generate_bevel(\"bump\", bevel_start = 0, bevel_end = 0.4, max_height=0.25)   roof_model = generate_beveled_polygon(skeleton, base_height=1,                                         bevel_offsets = bevel,                                         material = material_list(diffuse=\"purple\"))    raymesh_model(roof_model, override_material = FALSE) |>     add_object(scene_base) |>     render_scene(lookfrom=c(10,30,20), sample_method = \"sobol_blue\",                  width=800,height=800,fov=0,ortho_dimensions=c(10,10)) }   # Generate a complex bevel and use the exact specified heights if(run_docs_raybevel()) {   bevel = generate_complex_bevel(c(\"bump\", \"exp\", \"circular\",\"step\"),                                  bevel_start = c(0,0.3,0.7,0.95),                                  bevel_end = c(0.1,0.6,0.95,1),                                  reverse = c(F,F,T,F),                                  segment_height = c(0.25,0.5,0.5,4),                                  plot_bevel = TRUE)    roof_model = generate_beveled_polygon(skeleton, vertical_offset=0.1,                                         bevel_offsets = bevel,                                         raw_heights = TRUE,                                         material = material_list(diffuse=\"purple\"))    raymesh_model(roof_model, override_material = FALSE) |>     add_object(scene_base) |>     render_scene(lookfrom=c(10,30,20), sample_method = \"sobol_blue\",                  width=800,height=800,fov=0,ortho_dimensions=c(10,10)) }    # Turn the polygon into a ziggurat, using the step bevel type if(run_docs_raybevel()) {   offs = seq(0, 1, by = 0.05)   bevel = generate_complex_bevel(\"step\",                                  bevel_start = offs[-length(offs)],                                  bevel_end = offs[-1],                                  segment_height = 0.2)    roof_model = generate_beveled_polygon(skeleton, vertical_offset=0.2,                                         bevel_offsets = bevel,                                         raw_heights = TRUE,                                         material = material_list(diffuse = \"purple\"))    raymesh_model(roof_model, override_material = FALSE) |>     add_object(scene_base) |>     render_scene(lookfrom = c(10,30,20), sample_method = \"sobol_blue\",                  width = 800, height = 800, fov = 0, ortho_dimensions = c(10,10)) }   # Turn the polygon into a smooth wavy slide, taking advantage of vector recycling to flip/reverse if(run_docs_raybevel()) {   offs = seq(0, 1, by = 0.1)   bevel = generate_complex_bevel(\"exp\",                                  bevel_start = offs[-length(offs)],                                  bevel_end = offs[-1],                                  reverse = c(TRUE, FALSE),                                  flip = c(TRUE, FALSE),                                  segment_height = 0.25)    roof_model = generate_beveled_polygon(skeleton, vertical_offset=0.2,                                         bevel_offsets = bevel,                                         raw_heights = TRUE,                                         material = material_list(diffuse = \"purple\"))    raymesh_model(roof_model, override_material = FALSE) |>     add_object(scene_base) |>     render_scene(lookfrom = c(10,30,20), sample_method = \"sobol_blue\",                  width = 800, height = 800, fov = 0, ortho_dimensions = c(10,10)) }   # Skeletonize and turn an {sf} object into a beveled polygon if(run_docs_raybevel()) {   us_states = spData::us_states   texas = us_states[us_states$NAME == \"Texas\",]   texas_skeleton = skeletonize(texas)   plot_skeleton(texas_skeleton)    bevel = generate_bevel(\"angled\" , bevel_end=0.3, max_height = 0.3)   roof_model_texas = generate_beveled_polygon(texas_skeleton,                                         bevel_offsets = bevel,                                         material = material_list(diffuse = \"purple\")) |>     center_mesh() |>     translate_mesh(c(0,0.3,0))    raymesh_model(roof_model_texas, material = diffuse(color=\"purple\")) |>     add_object(scene_base) |>     add_object(sphere(x=-10,z=-10,y=5,material=light(color=\"red\", intensity=40))) |>     add_object(sphere(x=10,z=-10,y=5,material=light(color=\"orange\", intensity=40))) |>     render_scene(lookfrom=c(0,10,0),camera_up=c(0,0,1), sample_method = \"sobol_blue\",                  width=800,height=800,fov=0, ortho_dimensions=c(15,15)) }   # Generate a smooth bevel if(run_docs_raybevel()) {   bevel = generate_bevel(\"exp\", bevel_start = 0, bevel_end=0.5, max_height=2)   roof_model_texas = generate_beveled_polygon(texas_skeleton,                                         bevel_offsets = bevel,                                         material = material_list(diffuse = \"purple\")) |>     center_mesh() |>     translate_mesh(c(0,0.5,0))    raymesh_model(roof_model_texas, material = diffuse(color=\"purple\")) |>     add_object(scene_base) |>     add_object(sphere(x=-10,z=-10,y=5,material=light(color=\"red\", intensity=40))) |>     add_object(sphere(x=10,z=-10,y=5,material=light(color=\"orange\", intensity=40))) |>     render_scene(lookfrom=c(0,10,0),camera_up=c(0,0,1), sample_method = \"sobol_blue\",                  width=800,height=800,fov=0, ortho_dimensions=c(15,15)) }"},{"path":"http://www.raybevel.com/reference/generate_complex_bevel.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Complex 2D Bevel Profile for 3D Polygons — generate_complex_bevel","title":"Generate Complex 2D Bevel Profile for 3D Polygons — generate_complex_bevel","text":"arguments recycled length longest argument, allowing generation complex repetitive bevel patterns without manual replication argument values.","code":""},{"path":"http://www.raybevel.com/reference/generate_complex_bevel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Complex 2D Bevel Profile for 3D Polygons — generate_complex_bevel","text":"","code":"generate_complex_bevel(   bevel_type,   bevel_start = 0,   bevel_end = 1,   segment_height = 1,   angle = 45,   curve_points = 30,   reverse = FALSE,   flip = FALSE,   manual_offsets = NULL,   add_end_points = TRUE,   plot_bevel = FALSE,   overall_height = NA,   set_minimum_zero = TRUE,   zero_offset_epsilon = 1e-06 )"},{"path":"http://www.raybevel.com/reference/generate_complex_bevel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Complex 2D Bevel Profile for 3D Polygons — generate_complex_bevel","text":"bevel_type Vector bevel types. Options : `\"circular\"`, `\"exp\"`, `\"bump\"`, `\"step\"`, `\"block\"`, `\"angled\"`. Note `\"step\"` type, transition occurs `bevel_start`. bevel_start Numeric vector values `0` `1`. Percentage distance interior polygon begin corresponding `bevel_type`. Note `\"step\"` type, ignored. bevel_end Numeric vector values `0` `1`. Percentage distance interior polygon end corresponding `bevel_type`. segment_height Numeric vector. maximum heights bevel, measured initial height end previous bevel. angle Default `NULL`. Numeric vector. Optional angle parameter degrees angular bevels (overrides values `max_height`). curve_points Default `50`. Integer vector number points curve. reverse Default `FALSE`. Whether reverse bevel. flip Default `FALSE`. Whether reverse bevel horizontally. manual_offsets Default `NULL`, none. force bevel add point (interpolating two nearest points) specified offsets. useful want add points specific distances along curve. add_end_points Default `TRUE`. Whether ensure point zero point one. plot_bevel Default `FALSE`. Whether plot resulting bevel. overall_height Default `NA`. Numeric value specifying overall height curve. set_minimum_zero Default `TRUE`. Whether offset lowest point bevel zero. zero_offset_epsilon Default `1e-5`. Amount offset bevel ensure self-intersection base.","code":""},{"path":"http://www.raybevel.com/reference/generate_complex_bevel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Complex 2D Bevel Profile for 3D Polygons — generate_complex_bevel","text":"List containing 'x' 'y', coordinates complex 2D bevel profile","code":""},{"path":"http://www.raybevel.com/reference/generate_complex_bevel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Complex 2D Bevel Profile for 3D Polygons — generate_complex_bevel","text":"","code":"# Generate a complex bevel profile and plot it complex_coords = generate_complex_bevel(   bevel_type  = c(\"circular\", \"bump\", \"step\", \"block\", \"angled\"),   bevel_start = c(0,   0.2, 0.6, 0.7, 0.9),   bevel_end   = c(0.2, 0.5, 0.7, 0.8, 1.0),   segment_height  = c(0.1, 0.2, 0.2, 0.2, 0.4),   angle = 45,   curve_points = c(50, 50, 50, 1, 1),   reverse = c(FALSE, TRUE, FALSE, FALSE, FALSE),   plot_bevel = TRUE )  # Create a step function with reverses to generate a square wave pattern complex_coords = generate_complex_bevel(   bevel_type  = \"step\",   bevel_start = head(seq(0,1,by=0.05),-1),   bevel_end   = 1,   segment_height  = 0.1,   angle = 45,   reverse = c(FALSE, TRUE),   plot_bevel = TRUE )  #Generate an increasing sawtooth pattern with angles complex_coords = generate_complex_bevel(   bevel_type  = \"angled\",   bevel_start = head(seq(0,1,by=0.05),-1),   bevel_end   = tail(seq(0,1,by=0.05),-1),   segment_height  = 0.1,   angle = c(45,30),   reverse = c(FALSE, TRUE),   plot_bevel = TRUE )  # Create a step function to turn polygons into a ziggurat (note bevel_end is ignored) complex_coords = generate_complex_bevel(   bevel_type  = \"step\",   bevel_start = head(seq(0,1,by=0.05),-1),   bevel_end   = 1,   segment_height  = 0.1,   reverse = FALSE,   plot_bevel = TRUE )"},{"path":"http://www.raybevel.com/reference/generate_offset_links_nodes.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Offset Polygon — generate_offset_links_nodes","title":"Generate Offset Polygon — generate_offset_links_nodes","text":"Generate Offset Polygon","code":""},{"path":"http://www.raybevel.com/reference/generate_offset_links_nodes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Offset Polygon — generate_offset_links_nodes","text":"","code":"generate_offset_links_nodes(   ss,   offsets,   return_polys = FALSE,   progress = FALSE,   verbose = FALSE )"},{"path":"http://www.raybevel.com/reference/generate_offset_polygon.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate an offset polygon — generate_offset_polygon","title":"Generate an offset polygon — generate_offset_polygon","text":"function generates interior offset polygon straight skeleton.","code":""},{"path":"http://www.raybevel.com/reference/generate_offset_polygon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate an offset polygon — generate_offset_polygon","text":"","code":"generate_offset_polygon(skeleton, offset, progress = FALSE)"},{"path":"http://www.raybevel.com/reference/generate_offset_polygon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate an offset polygon — generate_offset_polygon","text":"skeleton Default `NULL`. straight skeleton generated `skeletonize` function. offset Default `NULL`. offset(s) polygon. progress Default `FALSE`. Whether display progress bar.","code":""},{"path":"http://www.raybevel.com/reference/generate_offset_polygon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate an offset polygon — generate_offset_polygon","text":"list data frames, representing polygon offset specified amount.","code":""},{"path":"http://www.raybevel.com/reference/generate_offset_polygon.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate an offset polygon — generate_offset_polygon","text":"","code":"# Simple polygon example simple_poly = matrix(c(0,0, 3,0, 3,3, 0,3, 0,0), ncol=2, byrow=TRUE) skeleton = skeletonize(simple_poly) offset_polys = generate_offset_polygon(skeleton, c(0.25, 0.5)) print(offset_polys) #> [[1]] #> [[1]] #> $offset_0.250000_1 #>      x    y #> 1 0.25 0.25 #> 2 2.75 0.25 #> 3 2.75 2.75 #> 4 0.25 2.75 #>  #> attr(,\"class\") #> [1] \"rayskeleton_offset_polygons\" \"list\"                        #> attr(,\"number_polygons\") #> [1] 1 #>  #> [[2]] #> $offset_0.500000_2 #>     x   y #> 1 0.5 0.5 #> 2 2.5 0.5 #> 3 2.5 2.5 #> 4 0.5 2.5 #>  #> attr(,\"class\") #> [1] \"rayskeleton_offset_polygons\" \"list\"                        #> attr(,\"number_polygons\") #> [1] 1 #>  #> attr(,\"class\") #> [1] \"rayskeleton_offset_polygons_collection\" #> [2] \"list\"                                   #> attr(,\"skeleton\") #> $nodes #>   id   x   y time  edge #> 1  1 0.0 0.0  0.0  TRUE #> 2  2 3.0 0.0  0.0  TRUE #> 3  3 3.0 3.0  0.0  TRUE #> 4  4 0.0 3.0  0.0  TRUE #> 5  5 1.5 1.5  1.5 FALSE #>  #> $links #>   source destination  edge source_time destination_time #> 1      4           3  TRUE           0              0.0 #> 2      3           2  TRUE           0              0.0 #> 3      2           1  TRUE           0              0.0 #> 4      1           4  TRUE           0              0.0 #> 5      1           5 FALSE           0              1.5 #> 6      2           5 FALSE           0              1.5 #> 7      3           5 FALSE           0              1.5 #> 8      4           5 FALSE           0              1.5 #>  #> attr(,\"class\") #> [1] \"rayskeleton\" #> attr(,\"original_vertices\") #>      x y #> [1,] 0 0 #> [2,] 3 0 #> [3,] 3 3 #> [4,] 0 3 #> attr(,\"original_holes\") #> list() #> attr(,\"number_offsets\") #> [1] 2 #> attr(,\"original_vertices\") #>      x y #> [1,] 0 0 #> [2,] 3 0 #> [3,] 3 3 #> [4,] 0 3 #> attr(,\"original_holes\") #> list() #>  #> attr(,\"class\") #> [1] \"rayskeleton_polygons\" \"list\"                  # Polygon with hole example # Outer polygon vertices = matrix(c(0,0, 7,0, 7,7, 0,7, 0,0), ncol = 2, byrow = TRUE) # Holes inside the polygon hole_1 = matrix(c(1,1, 2,1, 2,2, 1,2, 1,1), ncol = 2, byrow = TRUE)[5:1,] hole_2 = matrix(c(5,5, 6,5, 6,6, 5,6, 5,5), ncol = 2, byrow = TRUE)[5:1,] skeleton = skeletonize(vertices, holes = list(hole_1, hole_2)) plot_skeleton(skeleton)   #Generate three offsets plot_offset_polygon(generate_offset_polygon(skeleton, c(0.25,0.75,1.5,2)))   #Generate many offsets plot_offset_polygon(generate_offset_polygon(skeleton, seq(0,2.5,by=0.1)+0.05))   # Skeletonize and plot an {sf} object if(length(find.package(\"spData\",quiet = TRUE)) > 0) {   us_states = spData::us_states   texas = us_states[us_states$NAME == \"Texas\",]   texas_skeleton = skeletonize(texas)   plot_offset_polygon(generate_offset_polygon(texas_skeleton, seq(0, 2.5, by = 0.1)),                       border = heat.colors,                       linewidth = 1) }"},{"path":"http://www.raybevel.com/reference/generate_roof.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a 3D roof model — generate_roof","title":"Generate a 3D roof model — generate_roof","text":"function generates 3D roof model straight skeleton.","code":""},{"path":"http://www.raybevel.com/reference/generate_roof.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a 3D roof model — generate_roof","text":"","code":"generate_roof(   skeleton,   max_height = NA,   vertical_offset = 0,   base = FALSE,   base_height = 0,   angle = 45,   sides = FALSE,   double_sided = FALSE,   scale_all_max = FALSE,   swap_yz = TRUE,   progress = TRUE,   material = material_list(),   roof_material = NA,   verbose = FALSE )"},{"path":"http://www.raybevel.com/reference/generate_roof.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a 3D roof model — generate_roof","text":"skeleton Default `NULL`. straight skeleton generated `skeletonize` function. max_height Default `NA`. maximum height roof. vertical_offset Default `0`. vertical offset roof. base Default `TRUE`. logical flag controls whether generate bottom roof. base_height Default `vertical_offset`. Height base. angle Default `45`. Angle roof. sides Default `FALSE`. logical flag whether draw sides. automatically set `TRUE` `base = TRUE` `base_height` less `vertical_offset`. double_sided Default `FALSE`. logical flag controls whether polygon double-sided. scale_all_max Default `FALSE`. passing list multiple skeletons polygons, whether scale polygon overall max height, whether scale max height maximum internal distance polygon. swap_yz Default `TRUE`. logical flag controls whether swap y z coordinates resulting mesh. `TRUE`, y z coordinates swapped. progress Default `TRUE`. logical flag control whether progress bar displayed roof generation. material Default `material_list()`. Interface set color/appearance/material options resulting `ray_mesh` mesh. roof_material Default `NA`, uses material specified `material`. Interface set color/appearance/material options resulting `ray_mesh` rooftop mesh. verbose Default `FALSE`. logical flag control whether additional timing information displayed.","code":""},{"path":"http://www.raybevel.com/reference/generate_roof.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a 3D roof model — generate_roof","text":"3D mesh roof model.","code":""},{"path":"http://www.raybevel.com/reference/generate_roof.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a 3D roof model — generate_roof","text":"","code":"#Generate vertices and holes vertices = matrix(c(0,0, 7,0, 7,7, 0,7, 0,0), ncol = 2, byrow = TRUE)-3.5 hole_1 = matrix(c(1,1, 2,1, 2,2, 1,2, 1,1), ncol = 2, byrow = TRUE)[5:1,]-3.5 hole_2 = matrix(c(5,5, 6,5, 6,6, 5,6, 5,5), ncol = 2, byrow = TRUE)[5:1,]-3.5 skeleton = skeletonize(vertices, holes = list(hole_1, hole_2)) if(run_docs_raybevel()) { plot_skeleton(skeleton) }   #Generate a roof model and specify the material if(run_docs_raybevel()) {   library(rayrender)   library(rayvertex)   roof_model = generate_roof(skeleton, material = material_list(diffuse=\"purple\"))   scene_base = xz_rect(xwidth=100,zwidth=100,                        material=diffuse(color=\"grey20\", checkercolor=\"white\")) |>     add_object(sphere(y=8,z=10,x=-3,material=light(intensity=100))) |>     add_object(sphere(y=800,z=10,x=-3,radius=100,material=light(intensity=5)))    raymesh_model(roof_model, override_material = FALSE) |>     add_object(scene_base) |>     render_scene(lookfrom=c(10,30,20), sample_method = \"sobol_blue\",                  width=800,height=800,fov=0,ortho_dimensions=c(10,10)) }   # Change the maximum height of the roof if(run_docs_raybevel()) {   roof_model = generate_roof(skeleton, max_height=5)   raymesh_model(roof_model, material = diffuse(color=\"purple\")) |>     add_object(scene_base) |>     render_scene(lookfrom=c(10,30,20), sample_method = \"sobol_blue\",                  width=800,height=800,fov=0,ortho_dimensions=c(10,10)) }   #Add a vertical_offset to the roof, without a base if(run_docs_raybevel()) {   roof_model = generate_roof(skeleton, vertical_offset = 2, base = FALSE)   raymesh_model(roof_model, material = diffuse(color=\"purple\")) |>     add_object(scene_base) |>     render_scene(lookfrom=c(10,10,20), lookat=c(0,2,0), sample_method = \"sobol_blue\",                  width=800,height=800,fov=0,ortho_dimensions=c(10,10)) }   # Add a base if(run_docs_raybevel()) {   roof_model = generate_roof(skeleton, vertical_offset = 2, base = TRUE)   raymesh_model(roof_model, material = diffuse(color=\"purple\")) |>     add_object(scene_base) |>     render_scene(lookfrom=c(10,10,20), lookat=c(0,2,0), sample_method = \"sobol_blue\",                  width=800,height=800,fov=0,ortho_dimensions=c(10,10)) }   # Change the base height (note that the vertical_offset is measured from the base, not from zero) if(run_docs_raybevel()) {   roof_model = generate_roof(skeleton, vertical_offset = 2, base = TRUE, base_height=1)   raymesh_model(roof_model, material = diffuse(color=\"purple\")) |>     add_object(scene_base) |>     render_scene(lookfrom=c(10,10,20), lookat=c(0,2,0), sample_method = \"sobol_blue\",                  width=800,height=800,fov=0,ortho_dimensions=c(10,10)) }    # Skeletonize and turn an {sf} object into a roof if(run_docs_raybevel()) {   us_states = spData::us_states   cali = us_states[us_states$NAME == \"California\",]   cali_skeleton = skeletonize(cali)   plot_skeleton(cali_skeleton)   roof_model_cali = generate_roof(cali_skeleton, max_height = 2) |>     center_mesh() |>     translate_mesh(c(0,1,0))    raymesh_model(roof_model_cali, material = diffuse(color=\"purple\")) |>     add_object(scene_base) |>     add_object(sphere(x=-10,z=-10,y=4,material=light(color=\"red\", intensity=40))) |>     add_object(sphere(x=10,z=-10,y=4,material=light(color=\"orange\", intensity=40))) |>     render_scene(lookfrom=c(0,10,-1), sample_method = \"sobol_blue\",                  width=800,height=800,fov=0, ortho_dimensions=c(12,12)) }"},{"path":"http://www.raybevel.com/reference/get_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Get time — get_time","title":"Get time — get_time","text":"Get time","code":""},{"path":"http://www.raybevel.com/reference/get_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get time — get_time","text":"","code":"get_time(init = TRUE)"},{"path":"http://www.raybevel.com/reference/get_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get time — get_time","text":"Nothing","code":""},{"path":"http://www.raybevel.com/reference/identify_maxima_nodes.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify Local and Global Maxima Nodes — identify_maxima_nodes","title":"Identify Local and Global Maxima Nodes — identify_maxima_nodes","text":"Identify Local Global Maxima Nodes","code":""},{"path":"http://www.raybevel.com/reference/identify_maxima_nodes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify Local and Global Maxima Nodes — identify_maxima_nodes","text":"","code":"identify_maxima_nodes(straight_skeleton)"},{"path":"http://www.raybevel.com/reference/identify_maxima_nodes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify Local and Global Maxima Nodes — identify_maxima_nodes","text":"straight_skeleton straight skeleton object.","code":""},{"path":"http://www.raybevel.com/reference/identify_maxima_nodes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify Local and Global Maxima Nodes — identify_maxima_nodes","text":"Vector containting maxima ids","code":""},{"path":"http://www.raybevel.com/reference/init_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Print time — init_time","title":"Print time — init_time","text":"Print time","code":""},{"path":"http://www.raybevel.com/reference/init_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print time — init_time","text":"","code":"init_time()"},{"path":"http://www.raybevel.com/reference/init_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print time — init_time","text":"Nothing","code":""},{"path":"http://www.raybevel.com/reference/insert_polygon_links_nodes.html","id":null,"dir":"Reference","previous_headings":"","what":"Insert Polygon Links/Nodes — insert_polygon_links_nodes","title":"Insert Polygon Links/Nodes — insert_polygon_links_nodes","text":"Insert Polygon Links/Nodes","code":""},{"path":"http://www.raybevel.com/reference/insert_polygon_links_nodes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Insert Polygon Links/Nodes — insert_polygon_links_nodes","text":"","code":"insert_polygon_links_nodes(ss, new_links_all)"},{"path":"http://www.raybevel.com/reference/interpolate_location.html","id":null,"dir":"Reference","previous_headings":"","what":"Interpolate Location — interpolate_location","title":"Interpolate Location — interpolate_location","text":"Interpolate Location","code":""},{"path":"http://www.raybevel.com/reference/interpolate_location.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interpolate Location — interpolate_location","text":"","code":"interpolate_location(node_start, node_end, height_start, height_end, height)"},{"path":"http://www.raybevel.com/reference/interpolate_location.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interpolate Location — interpolate_location","text":"node_start Length-2 Numeric x/y position node_end Length-2 Numeric x/y position height_start Length-1 Numeric height start node height_end Length-1 Numeric height end node height Length-1 Numeric height interpolate","code":""},{"path":"http://www.raybevel.com/reference/make_incremental_nodes.html","id":null,"dir":"Reference","previous_headings":"","what":"Make incremental nodes — make_incremental_nodes","title":"Make incremental nodes — make_incremental_nodes","text":"Make incremental nodes","code":""},{"path":"http://www.raybevel.com/reference/make_incremental_nodes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make incremental nodes — make_incremental_nodes","text":"","code":"make_incremental_nodes(ss)"},{"path":"http://www.raybevel.com/reference/modify_bevel_with_skeleton.html","id":null,"dir":"Reference","previous_headings":"","what":"Modify bevel data using straight skeleton — modify_bevel_with_skeleton","title":"Modify bevel data using straight skeleton — modify_bevel_with_skeleton","text":"Modify bevel data using straight skeleton","code":""},{"path":"http://www.raybevel.com/reference/modify_bevel_with_skeleton.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Modify bevel data using straight skeleton — modify_bevel_with_skeleton","text":"","code":"modify_bevel_with_skeleton(bevel_offsets, bevel_heights, straight_skeleton)"},{"path":"http://www.raybevel.com/reference/modify_bevel_with_skeleton.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Modify bevel data using straight skeleton — modify_bevel_with_skeleton","text":"list. Modified bevel_height bevel_offset vectors.","code":""},{"path":"http://www.raybevel.com/reference/plot_offset_polygon.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Offset Polygons — plot_offset_polygon","title":"Plot Offset Polygons — plot_offset_polygon","text":"Plot offset polygons generated `generate_offset_polygon` function.","code":""},{"path":"http://www.raybevel.com/reference/plot_offset_polygon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Offset Polygons — plot_offset_polygon","text":"","code":"plot_offset_polygon(   offset_polygons,   plot_original_polygon = TRUE,   fill = NA,   color = \"dodgerblue\",   xlim = NULL,   ylim = NULL,   linewidth = 1,   background = \"white\",   plot_skeleton = FALSE,   return_layers = FALSE,   ... )"},{"path":"http://www.raybevel.com/reference/plot_offset_polygon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Offset Polygons — plot_offset_polygon","text":"offset_polygons Default `NULL`. `rayskeleton_polygon` `rayskeleton_polygon_list` object, generated `generate_offset_polygon()`. plot_original_polygon Default `TRUE`. Whether plot original polygon. fill Default `NULL`. color palette function generate fill palette polygons' interiors. color Default `grDevices::heat.colors`.  color palette function generate color palette offset polygons' borders. xlim Default `NULL`. x-axis limits vector two values (min, max). `NULL`, calculates limits data. ylim Default `NULL`. y-axis limits vector two values (min, max). `NULL`, calculates limits data. linewidth Default `1`. linewidth polygon. background Default `\"white\"`. Background color. plot_skeleton Default `FALSE`. Whether plot straight skeleton. return_layers Default `FALSE`, plots figure. `TRUE`, instead return list ggplot layers. ... Additional arguments pass `plot_skeleton()` `plot_skeleton = TRUE`","code":""},{"path":"http://www.raybevel.com/reference/plot_offset_polygon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Offset Polygons — plot_offset_polygon","text":"plot showing offset polygons.","code":""},{"path":"http://www.raybevel.com/reference/plot_offset_polygon.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Offset Polygons — plot_offset_polygon","text":"","code":"# Outer polygon vertices = matrix(c(0,0, 7,0, 7,7, 0,7, 0,0), ncol = 2, byrow = TRUE) # Holes inside the polygon hole_1 = matrix(c(1,1, 2,1, 2,2, 1,2, 1,1), ncol = 2, byrow = TRUE)[5:1,] hole_2 = matrix(c(5,5, 6,5, 6,6, 5,6, 5,5), ncol = 2, byrow = TRUE)[5:1,] skeleton = skeletonize(vertices, holes = list(hole_1, hole_2)) plot_skeleton(skeleton)   #Generate three offsets with the skeleton plot_offset_polygon(generate_offset_polygon(skeleton, c(0.25,0.75,1.5,2)), plot_skeleton = TRUE)   #Generate many offsets plot_offset_polygon(generate_offset_polygon(skeleton, seq(0.05,2.55,by=0.1)))   #Pass a palette plot_offset_polygon(generate_offset_polygon(skeleton, seq(0.05,2.55,by=0.1)),                     color = heat.colors)   #Pass colors manually (colors in excess of the number of offsets are ignored) plot_offset_polygon(generate_offset_polygon(skeleton, seq(0.05,2.55,by=0.1)),                     color = rep(c(\"red\",\"red\",\"blue\",\"blue\"),100))   # Skeletonize and plot an {sf} object if(length(find.package(\"spData\",quiet = TRUE)) > 0) {   us_states = spData::us_states   texas = us_states[us_states$NAME == \"Texas\",]   texas_skeleton = skeletonize(texas)   plot_offset_polygon(generate_offset_polygon(texas_skeleton, seq(0, 2.5, by = 0.1)),                       color = heat.colors,                       linewidth = 1) }"},{"path":"http://www.raybevel.com/reference/plot_skeleton.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the Straight Skeleton of a Polygon — plot_skeleton","title":"Plot the Straight Skeleton of a Polygon — plot_skeleton","text":"function visualizes straight skeleton derived given polygon. original polygon (holes present) plotted black, straight skeleton plotted red.","code":""},{"path":"http://www.raybevel.com/reference/plot_skeleton.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the Straight Skeleton of a Polygon — plot_skeleton","text":"","code":"plot_skeleton(   skeleton,   use_arrow = TRUE,   use_points = TRUE,   xlim = c(0, 1),   ylim = c(0, 1),   arrow_color = \"red\",   polygon_color = \"black\",   size = 1,   arrow_size = 0.05,   highlight_links = NULL,   highlight_color = \"green\",   return_layers = FALSE )"},{"path":"http://www.raybevel.com/reference/plot_skeleton.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the Straight Skeleton of a Polygon — plot_skeleton","text":"skeleton list object class 'rayskeleton' containing straight skeleton details. 'nodes' 'links' primary components. use_arrow Default `TRUE`. logical value indicating whether use arrows represent links straight skeleton. Default TRUE. use_points Default `TRUE`. Whether plot vertex points well. xlim Default`c(0,1)`. numeric vector length 2 specifying x-limits plot form `c(min, max)`. proportional limits relative bounding box around skeleton. ylim Default `c(0,1)`. numeric vector length 2 specifying y-limits plot form c(min, max). proportional limits relative bounding box around skeleton. arrow_color Default `\"red\"`. Color arrows. polygon_color Default `\"black\"`. Color polygon. size Default `1`. Size vertex points. arrow_size Default `1`. Scales arrow size. highlight_links Default `NULL`. numeric vector indicating links (index) highlight. specified, corresponding links colored `highlight_color`. highlight_color Default `\"purple\"`. Color highlighted links. return_layers Default `FALSE`, plots figure. `TRUE`, instead return list ggplot layers.","code":""},{"path":"http://www.raybevel.com/reference/plot_skeleton.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the Straight Skeleton of a Polygon — plot_skeleton","text":"ggplot object visualizing straight skeleton original polygon.","code":""},{"path":"http://www.raybevel.com/reference/plot_skeleton.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot the Straight Skeleton of a Polygon — plot_skeleton","text":"function uses `ggplot2` package plotting. straight skeleton          visualized based details provided `skeleton` object.          original polygon holes plotted based attributes stored          `skeleton` object.","code":""},{"path":"http://www.raybevel.com/reference/plot_skeleton.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the Straight Skeleton of a Polygon — plot_skeleton","text":"","code":"# Assuming skeleton1 is already defined as in the previous example # Outer polygon vertices = matrix(c(0,0, 7,0, 7,7, 0,7, 0,0), ncol = 2, byrow = TRUE) # Holes inside the polygon hole1 = matrix(c(1,1, 1,2, 2,2, 2,1, 1,1), ncol = 2, byrow = TRUE) hole2 = matrix(c(5,5, 5,6, 6,6, 6,5, 5,5), ncol = 2, byrow = TRUE) skeleton = skeletonize(vertices, holes = list(hole1, hole2)) if(length(find.package(\"ggplot2\",quiet = TRUE)) > 0) {   plot_skeleton(skeleton) }  # Skeletonize and plot an {sf} object if(length(find.package(\"spData\",quiet = TRUE)) > 0) {   us_states = spData::us_states   texas = us_states[us_states$NAME == \"Texas\",]   plot_skeleton(skeletonize(texas)) }  # Highlighting certain links in the skeleton max_links =which(skeleton$links$destination_time == max(skeleton$links$destination_time)) if(length(find.package(\"ggplot2\",quiet = TRUE)) > 0) {   plot_skeleton(skeleton, highlight_links = max_links, highlight_color = \"green\") }"},{"path":"http://www.raybevel.com/reference/print_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Print time — print_time","title":"Print time — print_time","text":"Print time","code":""},{"path":"http://www.raybevel.com/reference/print_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print time — print_time","text":"","code":"print_time(verbose = FALSE, message_text = \"\")"},{"path":"http://www.raybevel.com/reference/print_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print time — print_time","text":"Nothing","code":""},{"path":"http://www.raybevel.com/reference/process_sliced_links.html","id":null,"dir":"Reference","previous_headings":"","what":"Process sliced links — process_sliced_links","title":"Process sliced links — process_sliced_links","text":"Process sliced links","code":""},{"path":"http://www.raybevel.com/reference/process_sliced_links.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process sliced links — process_sliced_links","text":"","code":"process_sliced_links(link_group)"},{"path":"http://www.raybevel.com/reference/recalculate_ordered_ids.html","id":null,"dir":"Reference","previous_headings":"","what":"Recalculate Ordered IDs — recalculate_ordered_ids","title":"Recalculate Ordered IDs — recalculate_ordered_ids","text":"Recalculate Ordered IDs","code":""},{"path":"http://www.raybevel.com/reference/recalculate_ordered_ids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Recalculate Ordered IDs — recalculate_ordered_ids","text":"","code":"recalculate_ordered_ids(skeleton)"},{"path":"http://www.raybevel.com/reference/remove_node_duplicates.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove Node Duplicates — remove_node_duplicates","title":"Remove Node Duplicates — remove_node_duplicates","text":"Replace dup","code":""},{"path":"http://www.raybevel.com/reference/remove_node_duplicates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove Node Duplicates — remove_node_duplicates","text":"","code":"remove_node_duplicates(ss)"},{"path":"http://www.raybevel.com/reference/remove_node_duplicates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove Node Duplicates — remove_node_duplicates","text":"ss","code":""},{"path":"http://www.raybevel.com/reference/remove_reversed_links.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove Reversed Links — remove_reversed_links","title":"Remove Reversed Links — remove_reversed_links","text":"Remove Reversed Links","code":""},{"path":"http://www.raybevel.com/reference/remove_reversed_links.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove Reversed Links — remove_reversed_links","text":"","code":"remove_reversed_links(skeleton)"},{"path":"http://www.raybevel.com/reference/run_docs_raybevel.html","id":null,"dir":"Reference","previous_headings":"","what":"Run Documentation — run_docs_raybevel","title":"Run Documentation — run_docs_raybevel","text":"function determines examples run pkgdown. meant called user.","code":""},{"path":"http://www.raybevel.com/reference/run_docs_raybevel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run Documentation — run_docs_raybevel","text":"","code":"run_docs_raybevel()"},{"path":"http://www.raybevel.com/reference/run_docs_raybevel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run Documentation — run_docs_raybevel","text":"Boolean value.","code":""},{"path":"http://www.raybevel.com/reference/run_docs_raybevel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run Documentation — run_docs_raybevel","text":"","code":"# See if the documentation should be run. run_docs_raybevel() #> [1] TRUE"},{"path":"http://www.raybevel.com/reference/skeletonize.html","id":null,"dir":"Reference","previous_headings":"","what":"Skeletonize a polygon — skeletonize","title":"Skeletonize a polygon — skeletonize","text":"function generates straight skeleton polygon, based set vertices holes. uses CGAL library create straight skeleton using exact arithmetic, parses file manageable format.","code":""},{"path":"http://www.raybevel.com/reference/skeletonize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Skeletonize a polygon — skeletonize","text":"","code":"skeletonize(   vertices,   holes = list(),   debug = FALSE,   merge_nodes_tolerance = 1e-05,   return_raw_ss = FALSE,   progress = TRUE )"},{"path":"http://www.raybevel.com/reference/skeletonize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Skeletonize a polygon — skeletonize","text":"vertices Default `NULL`. matrix x y coordinates representing vertices polygon counter-clockwise (CCW) order. holes Default `list()`. list matrices, representing hole polygon x y coordinates clockwise (CW) order. debug Default `FALSE`. logical flag controls whether debugging information printed. merge_nodes_tolerance Default `1e-5`. numeric value specifying tolerance level merging nodes. value 0 1. value species size grid nodes snapped determining identical nodes. return_raw_ss Default `FALSE`. logical flag controls whether raw straight skeleton returned. progress Default `TRUE`. logical flag controls whether progress bar displayed skeletonizing.","code":""},{"path":"http://www.raybevel.com/reference/skeletonize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Skeletonize a polygon — skeletonize","text":"`return_raw_ss` FALSE, list two data frames, 'nodes' 'links', represent nodes edges straight skeleton, respectively. `return_raw_ss` TRUE, data frame representing raw straight skeleton returned. polygon simple, warning issued NULL returned.","code":""},{"path":"http://www.raybevel.com/reference/skeletonize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Skeletonize a polygon — skeletonize","text":"","code":"# Example 1: Simple rectangle polygon with no holes vertices1 = matrix(c(0,0, 4,0, 4,3, 0,3, 0,0), ncol = 2, byrow = TRUE) skeleton1 = skeletonize(vertices1) plot_skeleton(skeleton1)   # Example 2: Triangle polygon with no holes vertices2 = matrix(c(0,0, 2,0, 1,2, 0,0), ncol = 2, byrow = TRUE) skeleton2 = skeletonize(vertices2) plot_skeleton(skeleton2)   # Example 3: Polygon with a hole # Outer polygon vertices3 = matrix(c(0,0, 5,0, 5,5, 0,5, 0,0), ncol = 2, byrow = TRUE) # Hole inside the polygon hole3 = matrix(c(1,1, 4,1, 4,4, 1,4, 1,1), ncol = 2, byrow = TRUE)[5:1,] skeleton3 = skeletonize(vertices3, holes = list(hole3)) plot_skeleton(skeleton3)   # Example 4: Polygon with multiple holes # Outer polygon vertices4 = matrix(c(0,0, 7,0, 7,7, 0,7, 0,0), ncol = 2, byrow = TRUE) # Holes inside the polygon hole4_1 = matrix(c(1,1, 2,1, 2,2, 1,2, 1,1), ncol = 2, byrow = TRUE)[5:1,] hole4_2 = matrix(c(5,5, 6,5, 6,6, 5,6, 5,5), ncol = 2, byrow = TRUE)[5:1,] skeleton4 = skeletonize(vertices4, holes = list(hole4_1, hole4_2)) plot_skeleton(skeleton4)   # Example 5: Using debug and returning raw straight skeleton vertices5 = matrix(c(0,0, 3,0, 3,3, 0,3, 0,0), ncol = 2, byrow = TRUE) raw_skeleton5 = skeletonize(vertices5, debug = TRUE, return_raw_ss = TRUE)  # Skeletonize and plot an {sf} object if(length(find.package(\"spData\",quiet = TRUE)) > 0) {   us_states = spData::us_states   texas = us_states[us_states$NAME == \"Texas\",]   plot_skeleton(skeletonize(texas)) }"},{"path":"http://www.raybevel.com/reference/swap_yz.html","id":null,"dir":"Reference","previous_headings":"","what":"Extrude Sides of Polygon — swap_yz","title":"Extrude Sides of Polygon — swap_yz","text":"Extrude Sides Polygon","code":""},{"path":"http://www.raybevel.com/reference/swap_yz.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extrude Sides of Polygon — swap_yz","text":"","code":"swap_yz(mesh)"},{"path":"http://www.raybevel.com/reference/unit_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"Dot Product — unit_vector","title":"Dot Product — unit_vector","text":"Dot Product","code":""},{"path":"http://www.raybevel.com/reference/unit_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dot Product — unit_vector","text":"","code":"unit_vector(v)"},{"path":"http://www.raybevel.com/reference/unit_vector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dot Product — unit_vector","text":"Value","code":""},{"path":"http://www.raybevel.com/reference/unit_vector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dot Product — unit_vector","text":"","code":"#None"}]
